{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","reportWebVitals.js","index.js"],"names":["props","className","operation","double","tiple","onClick","e","click","label","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","eval","isNaN","isFinite","n","includes","i","newValue","parseFloat","console","log","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ff39aab.chunk.js","sourcesContent":["import react from \"react\";\nimport './Button.css';\n\nexport default props =>\n    <button className={`\n        button\n        ${props.operation ? 'operation': ''}\n        ${props.double ? 'double' : ''}\n        ${props.tiple ? 'tiple' : ''}\n    `} onClick={e => props.click && props.click(props.label)}>\n        {props.label}\n    </button>","\nimport react, {Component} from \"react\";\nimport './Calculator.css';\n\nimport Button from \"../components/Button\";\nimport Display from \"../components/Display\";\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0,0],\n    current: 0\n}\n\n\nexport default class Calculator extends Component{\n\n    state = {...initialState}\n\n    constructor(props) {\n        super(props)\n        this.clearMemory = this.clearMemory.bind(this)\n        this.setOperation = this.setOperation.bind(this)\n        this.addDigit = this.addDigit.bind(this)\n    }\n    \n    clearMemory() {\n        this.setState({...initialState})\n    }\n\n    setOperation(operation) {\n        if (this.state.current === 0 ) {\n            this.setState({operation, current: 1, clearDisplay: true})\n        } else {\n            const equals = operation === '='\n            const currentOperation  = this.state.operation\n            const values = [...this.state.values]\n            try{\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\n                if (isNaN(values[0]) || !isFinite(values[0])) {\n                    this.clearMemory()\n                return\n                }\n            } catch(e) {\n                values[0] = this.state.values[0]\n            }\n            values[1] = 0\n\n            this.setState({\n                displayValue: values[0],\n                operation: equals ? null : operation,\n                current: equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            })\n        }\n    }\n\n    addDigit(n){\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return\n        }\n\n        const ClearDisplay = this.state.displayValue === '0'\n            || this.state.clearDisplay\n        const currentValue = ClearDisplay ? '' : this.state.displayValue\n        const displayValue = currentValue + n\n        this.setState({displayValue, clearDisplay:false})\n\n        if (n !== '.') {\n            const i = this.state.current\n            const newValue = parseFloat(displayValue)\n            const values = [...this.state.values]\n            values[i] = newValue\n            this.setState({values})\n            console.log(values)\n        \n        }\n    }\n\n\n    render() {        \n        return (\n            <div className='calculator'>\n            <Display value={this.state.displayValue}></Display>\n            <Button label='AC' click={this.clearMemory} tiple></Button>\n            <Button label='/' click={this.setOperation} operation></Button>\n            <Button label='7' click={this.addDigit}></Button>\n            <Button label='8' click={this.addDigit}></Button>            \n            <Button label='9' click={this.addDigit}></Button>\n            <Button label='*' click={this.setOperation} operation ></Button>\n            <Button label='4' click={this.addDigit}></Button>\n            <Button label='5' click={this.addDigit}></Button>\n            <Button label='6' click={this.addDigit}></Button>\n            <Button label='-' click={this.setOperation} operation ></Button>\n            <Button label='3' click={this.addDigit}></Button>\n            <Button label='2' click={this.addDigit}></Button>\n            <Button label='1' click={this.addDigit}></Button>\n            <Button label='+' click={this.setOperation} operation ></Button>\n            <Button label='0' click={this.addDigit} double></Button>\n            <Button label='.' click={this.addDigit}></Button>\n            <Button label='='  click={this.setOperation}  operation ></Button>\n            </div>\n        )\n\n    }\n\n\n}\n\n","import react from \"react\";\nimport './Display.css';\n\nexport default props =>\n<div className='display'>\n    {props.value}\n</div>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <h1>Calculadora</h1>\n    <Calculator></Calculator>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}